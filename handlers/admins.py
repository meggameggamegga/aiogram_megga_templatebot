"""
–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å

"""
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, state


from aiogram_megga_templatebot.filters.admin import AdminCheck

from aiogram_megga_templatebot.keyboards.inline_category import *
from aiogram_megga_templatebot.keyboards.reply_keyboard import menu_keyboard, admin_keyboard_menu, admin_add
from aiogram_megga_templatebot.main import dp,bot
from aiogram_megga_templatebot.services.sql import DataBase
from aiogram_megga_templatebot.states.states import  AdminState

db = DataBase('my_shop.db')

@dp.message_handler(AdminCheck,text='–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é',state='*')
@dp.message_handler(AdminCheck,Command('admin_panel'))
async def admin_start(message:types.Message,state:FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.reset_state()
    await message.answer('–¢—ã –ø–æ–ø–∞–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.–í—ã–±–µ—Ä–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å',reply_markup=admin_keyboard_menu())

@dp.message_handler(AdminCheck,text='–í—ã–π—Ç–∏ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏',state='*')
async def admin_exit(message:types.Message,state:FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.reset_state()
    await message.answer('–í—ã—Ö–æ–¥ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏',reply_markup=menu_keyboard())

@dp.message_handler(AdminCheck,text='üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
async def edit_categories(message:types.Message):
    categories = db.get_all_categories()
    for category in categories:
        cat_id = category[0]
        name = category[1]
        count_products = len(db.get_products(cat_id))
        await message.answer(f'–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {count_products}\n'
                             f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID: {cat_id}\n'
                             f'–ò–º—è –ø—Ä–æ–¥—É–∫—Ç–∞: {name}\n',reply_markup=admin_category_edit(cat_id,name))#reply_markup#–¥–æ–±–∞–≤–∏—Ç—å –∫
    await message.answer('–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=admin_add(True))

#–†–µ–¥–∫–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@dp.message_handler(AdminCheck,text='üìã–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
async def edit_products(message:types.Message):
    categories = db.get_all_categories()
    await message.answer(f'–ü–æ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã?',reply_markup=show_products(categories))#reply_markup#–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
    await message.answer('–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã', reply_markup=admin_add())

@dp.callback_query_handler(admin_cb.filter(action='choose_category'))
async def show_product(call:types.CallbackQuery,callback_data:dict):
    await call.answer()
    category_id = callback_data.get('cat_id')
    products = db.get_products(category_id)
    print(products)
    await call.message.delete()
    for product in products:
        prod_id = product[0]
        name = product[1]
        desc = product[2]
        price = product[3]
        cat_id = product[4]
        await call.message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: {prod_id}\n'
                                  f'–ò–º—è: {name}\n'
                                  f'–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n'

                                  f'–¶–µ–Ω–∞: {price}\n',reply_markup=admin_products_edit(cat_id=cat_id,prod_id=prod_id))#reply_markup –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
#–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.callback_query_handler(admin_prod_cb.filter(action='delete_product'))
async def delete_product(call:types.CallbackQuery,callback_data:dict):
    cat_id = callback_data.get('cat_id')
    prod_id = callback_data.get('prod_id')
    db.delete_product(prod_id,cat_id)
    db.delete_basket_product(prod_id,cat_id)
    await call.message.edit_text('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    #–£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.callback_query_handler(admin_prod_cb.filter(action='edit_product_name'))
async def edit_product_name(call:types.CallbackQuery,callback_data:dict,state:FSMContext):
    await call.answer()
    category_id = callback_data.get('cat_id')
    prod_id = callback_data.get('prod_id')
    async with state.proxy() as data:
        data['category_id'] = category_id
        data['prod_id'] = prod_id
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ç–æ–≤–∞—Ä–∞')
    await AdminState.edit_name_prod.set()

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
@dp.message_handler(state=AdminState.edit_name_prod,content_types=types.ContentTypes.TEXT)
async def edit_product_name_set(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        category_id = data['category_id']
        prod_id = data['prod_id']
    db.edit_product_name(prod_id,category_id,str(message.text))
    await message.answer('–ò–º—è —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await state.reset_state()

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
@dp.callback_query_handler(admin_prod_cb.filter(action='edit_product_price'))
async def edit_product_price(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer()
    category_id = callback_data.get('cat_id')
    prod_id = callback_data.get('prod_id')
    async with state.proxy() as data:
        data['category_id'] = category_id
        data['prod_id'] = prod_id
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
    await AdminState.edit_price_prod.set()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—ã
@dp.message_handler(state=AdminState.edit_price_prod, content_types=types.ContentTypes.TEXT)
async def edit_product_price_set(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        category_id = data['category_id']
        prod_id = data['prod_id']
    db.edit_product_price(prod_id, category_id, int(message.text))
    await message.answer('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await state.reset_state()


#–ò–∑–º–µ–Ω–µ–Ω–∏–µ id
@dp.callback_query_handler(admin_prod_cb.filter(action='edit_product_id'))
async def edit_product_id(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer()
    category_id = callback_data.get('cat_id')
    prod_id = callback_data.get('prod_id')
    async with state.proxy() as data:
        data['category_id'] = category_id
        data['prod_id'] = prod_id
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞\n'
                              '<u>–í–ê–ñ–ù–û!</u>\n'
                              '<b>–ö–æ–≥–¥–∞ –≤—ã –º–µ–Ω—è–µ—Ç–µ –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–º–µ–Ω.</b>\n')
    await AdminState.edit_id_prod.set()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ id
@dp.message_handler(state=AdminState.edit_id_prod, content_types=types.ContentTypes.TEXT)
async def edit_product_id_set(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        category_id = data['category_id']
        prod_id = data['prod_id']
    db.edit_product_id(prod_id, category_id, int(message.text))
    await message.answer('ID —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await state.reset_state()


#–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(AdminCheck,admin_cb.filter(action='delete_category'))
async def delete_category(call:types.CallbackQuery,callback_data:dict):
    await call.answer()
    cat_id = callback_data.get('cat_id')
    name = callback_data.get('name')
    db.delete_category(cat_id,name)
    await call.message.edit_text('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞\n'
                                 '–ü—Ä–æ–¥—É–∫—Ç—ã –≤—Å–µ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å.')

#–í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(AdminCheck,admin_cb.filter(action='edit_category_name'))
async def edit_category_name(call:types.CallbackQuery,callback_data:dict,state:FSMContext):
    await call.answer()
    cat_id = callback_data.get('cat_id')
    name = callback_data.get('name')
    async with state.proxy() as data:
        data['cat_id'] = cat_id
        data['name'] = name
    await call.message.answer('–í–≤–µ–¥–∏ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    await AdminState.edit_name.set()

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(AdminCheck,state=AdminState.edit_name)
async def edit_category_name_save(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        name = data.get('name')
        cat_id = data.get('cat_id')
    db.edit_name_category(message.text,cat_id,name)
    await message.answer('–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await state.reset_state()



#–í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(AdminCheck,admin_cb.filter(action='edit_category_id'))
async def edit_category_id(call:types.CallbackQuery,callback_data:dict,state:FSMContext):
    await call.answer()
    cat_id = callback_data.get('cat_id')
    name = callback_data.get('name')
    async with state.proxy() as data:
        data['cat_id'] = cat_id
        data['name'] = name
    await call.message.answer('–í–≤–µ–¥–∏ ID ')
    await AdminState.edit_id.set()

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(AdminCheck,state=AdminState.edit_id)
async def edit_category_id_save(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        name = data.get('name')
        cat_id = data.get('cat_id')
    try:
        db.edit_id_category(int(message.text),cat_id,name)
        await message.answer('ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ')
        await state.reset_state()
    except Exception as e:
        await message.answer('–ö–∞–∂–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n'
                             '–í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:')


@dp.message_handler(AdminCheck, text='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç')
async def add_new_product(message: types.Message):
    categories = db.get_all_categories()
    text = "–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"

    for category in categories:
        category_id = category[0]
        category_name = category[1]
        text += f"ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_id}\n"
        text += f"–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}\n\n"

    await message.answer(f'{text}\n'
                         f'–î–≤–∞–∂–¥—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ–ª—å–∑—è.\n'
                         f'–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å,–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Å–ø–∏—Å–∫–µ.\n\n'
                         f'<b>–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞:</b>')
    await AdminState.add_product_name.set()


@dp.message_handler(AdminCheck,state=AdminState.add_product_name)
async def add_new_product_name(message: types.Message,state:FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await AdminState.add_product_desc.set()

@dp.message_handler(AdminCheck,state=AdminState.add_product_desc)
async def add_new_product_desc(message: types.Message,state:FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
    await AdminState.add_product_price.set()

@dp.message_handler(AdminCheck,state=AdminState.add_product_price)
async def add_new_product_price(message: types.Message,state:FSMContext):
    async with state.proxy() as data:
        data['price'] = int(message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞')
    await AdminState.add_product_category.set()

@dp.message_handler(AdminCheck, state=AdminState.add_product_category)
async def add_new_product_category(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        name = data.get('name')
        desc = data.get('desc')
        price = data.get('price')
    category_id = int(message.text)
    await message.answer(f'–ò–º—è —Ç–æ–≤–∞—Ä–∞: {name}\n'
                         f'–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n'
                         f'–¶–µ–Ω–∞: {price}\n'
                         f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_id}\n')
    db.add_product(name,desc,price,category_id)
    await message.answer('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    await state.reset_state()


