from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, state
from yoomoney import Quickpay,Client
import string
import random
from aiogram_megga_templatebot import config

from aiogram_megga_templatebot.keyboards.inline_category import *
from aiogram_megga_templatebot.keyboards.reply_keyboard import menu_keyboard
from aiogram_megga_templatebot.main import dp,bot
from aiogram_megga_templatebot.services.sql import DataBase


db = DataBase('my_shop.db')



@dp.message_handler(Command('start'))
async def start_cmnd(message:types.Message):
    if not db.user_exist(message.from_user.id):
        db.add_user(user_id=message.from_user.id)
        await message.answer('–ü—Ä–∏–≤–µ—Ç –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        await message.answer('–ë–æ—Ç –º–∞–≥–∞–∑–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n'
                             '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=menu_keyboard())  # reply_markup
    else:
        await message.answer('–ë–æ—Ç,–º–∞–≥–∞–∑–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n'
                             '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=menu_keyboard())  # reply_markup


@dp.message_handler(text='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏üìÅ')
async def category(message:types.Message):
    categories = db.get_all_categories()
    await message.answer('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',reply_markup=categories_keyboard(categories))

@dp.callback_query_handler(cat_cb.filter(action='categories'))
async def products(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    page = 0
    category_id = callback_data.get('cat_id')
    all_products = db.get_products(category_id)
    if len(all_products)>0:
        product = db.get_products(category_id)[page]
        await call.message.edit_text(f'–ò–º—è —Ç–æ–≤–∞—Ä–∞: {product[1]}\n'
                                 f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product[2]}\n'
                                 f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {product[3]}', reply_markup=button_keyboard(page_index=page,
                                                                                                     cat_id=category_id,
                                                                                                     prod_id=product[0],
                                                                                            ))
    else:
        await call.message.delete()
        await call.message.answer('–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤')

@dp.callback_query_handler(button_cb.filter(action='next'))
async def button_next(call:types.CallbackQuery,callback_data:dict):
    await call.answer()
    page = int(callback_data.get('page'))+1
    category_id = callback_data.get('cat_id')
    products = db.get_products(category_id)
    if page < len(products):
        product = products[page]
        await call.message.edit_text(f'–ò–º—è —Ç–æ–≤–∞—Ä–∞: {product[1]}\n'
                                     f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product[2]}\n'
                                     f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {product[3]}', reply_markup=button_keyboard(page_index=page,
                                                                                                     cat_id=category_id,
                                                                                                     prod_id=product[0]))

    else:
        categories = db.get_all_categories()
        await call.message.edit_text('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=categories_keyboard(categories))


@dp.callback_query_handler(button_cb.filter(action='back'))
async def button_back(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    page = int(callback_data.get('page'))
    category_id = callback_data.get('cat_id')
    all_products = db.get_products(category_id)[page - 1]
    if page - 1 >= 0:
        await call.message.edit_text(f'–ò–º—è —Ç–æ–≤–∞—Ä–∞: {all_products[1]}\n'
                                     f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {all_products[2]}\n'
                                     f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {all_products[3]}', reply_markup=button_keyboard(page_index=page-1,
                                                                                                     cat_id=category_id,
                                                                                                     prod_id=all_products[0],
                                                                                                     ))
    else:
        categories = db.get_all_categories()
        await call.message.edit_text('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',reply_markup=categories_keyboard(categories))  # –ù–∞–∑–∞–¥ –∫–Ω–æ–ø–∫–∞

@dp.callback_query_handler(button_cb.filter(action='add_product'))
async def add_product(call:types.CallbackQuery,callback_data:dict):
    await call.answer()
    category_id = int(callback_data.get('cat_id'))
    prod_id = int(callback_data.get('prod_id'))
    user_product = db.check_basket_product(user_id=call.from_user.id,cat_id=category_id,prod_id=prod_id)
    if user_product:
        await call.message.answer('–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
    else:
        db.add_user_product(call.from_user.id,prod_id,category_id)
        await call.message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')

@dp.message_handler(text='–ö–æ—Ä–∑–∏–Ω–∞üõí')
async def basket(message:types.Message):
    user_basket = db.get_user_basket(message.from_user.id)
    if user_basket:
        for basket in user_basket:
            prod_id = basket[2]
            cat_id = basket[3]

            product = db.get_product(cat_id=cat_id,prod_id=prod_id)[0]
            if product:
                print(product)
                name = product[1]
                desc = product[2]
                price = product[3]
                await message.answer(f'–ò–º—è —Ç–æ–≤–∞—Ä–∞:{name}\n'
                                 f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:{desc}\n'
                                 f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:{price}\n',
                                 reply_markup=delete_keyboard(cat_id=cat_id,prod_id=prod_id)) #reply_markup - —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –∫–æ—Ä–∑–∏–Ω—ã
    else:
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')#–í—ã–≤–µ—Å—Ç–∏ –∫–ª–∞–≤—É –º–±

@dp.message_handler(text='–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞üìù')
async def support(message:types.Message):
    await message.answer(f'–û–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @meggameggamegga')#–¢—É—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—á–∏–≥ –∏–ª–∏ settings –±–¥ –≤–∑—è—Ç—å —Å–∞–ø–ø–æ—Ä—Ç id

@dp.callback_query_handler(del_cb.filter(action='delete'))
async def delete_product_basket(call:types.CallbackQuery,callback_data:dict):
    await call.answer()
    cat_id = callback_data.get('cat_id')
    prod_id = callback_data.get('prod_id')
    db.delete_product_basket(user_id=call.from_user.id,prod_id=prod_id,cat_id=cat_id)
    await call.message.edit_text('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —Å –∫–æ—Ä–∑–∏–Ω—ã')

@dp.message_handler(text='–û–ø–ª–∞—Ç–∏—Ç—å üì¶')
async def pay_basket(message:types.Message):
    baskets = db.get_user_basket(message.from_user.id)
    count_products = len(baskets)
    price_all = 0
    if not baskets:
        await message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤')
    else:
        for basket in baskets:
            prod_id = basket[2]
            cat_id = basket[3]
            user_products = db.get_product(cat_id,prod_id)
            print(user_products)
            for user_product in user_products:
                price_all+= int(user_product[2])
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        label_user = ''.join(random.sample(string.ascii_letters + string.digits, 10))
        quickpay = Quickpay(
            receiver="410019014512803",
            quickpay_form="shop",
            targets="Sponsor this project",
            label=label_user,
            paymentType="SB",
            sum=price_all,
        )
        await message.answer(f'–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {count_products}\n'
                             f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price_all}',reply_markup=paymen_keyboard(quickpay.base_url,label_user))

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(pay_cb.filter(action='check_payment'))
async def payment_method(call:types.CallbackQuery, callback_data:dict):
    print('–í–æ—Ä–∫')
    await call.answer(cache_time=2)
    user_label = callback_data.get('label')
    client = Client(config.ACCESS_TOKEN)
    try:
        history = client.operation_history(label=user_label)
        status_operation = history.operations[-1].status
        #–ï—Å–ª–∏ –Ω–∞–π–¥–µ—Ç –ø–æ –ª–µ–π–±–ª—É –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞
        if history and status_operation=='success':#
            await call.message.answer('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞')
            await call.message.answer('–í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤')
    except Exception as e:
            await call.message.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –≤ –ø—É—Ç–∏')









